import tkinter as tk
from tkinter import messagebox
import json
import os

class ToDoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Raghav's To-Do List")
        self.root.geometry("500x400")
        
        self.tasks = []
        self.filename = "todo_simple.json"
        self.load_tasks()
        
        self.create_widgets()
        self.update_task_list()
    
    def create_widgets(self):
        tk.Label(self.root, text="To-Do List", font=("Arial", 16)).pack(pady=10)
        
        tk.Label(self.root, text="New Task:").pack(anchor=tk.W, padx=10)
        
        self.task_entry = tk.Entry(self.root, width=40, font=("Arial", 12))
        self.task_entry.pack(pady=5)
        self.task_entry.bind("<Return>", self.add_task)
        
        tk.Button(self.root, text="Add Task", command=self.add_task, width=10).pack(pady=5)
        
        self.task_list = tk.Listbox(self.root, width=50, height=10, font=("Arial", 12), selectmode=tk.SINGLE)
        self.task_list.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
        
        scrollbar = tk.Scrollbar(self.task_list)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.task_list.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.task_list.yview)
        
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=5)
        
        tk.Button(button_frame, text="Mark Complete", command=self.mark_complete, width=12).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Delete Task", command=self.delete_task, width=12).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Clear All", command=self.clear_all, width=12).pack(side=tk.LEFT, padx=5)
        
        self.status_var = tk.StringVar()
        self.status_var.set(f"Tasks: {len(self.tasks)}")
        tk.Label(self.root, textvariable=self.status_var, bd=1, relief=tk.SUNKEN, anchor=tk.W).pack(side=tk.BOTTOM, fill=tk.X)
    
    def load_tasks(self):
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as f:
                    self.tasks = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                self.tasks = []
        else:
            self.tasks = []
    
    def save_tasks(self):
        with open(self.filename, 'w') as f:
            json.dump(self.tasks, f, indent=2)
    
    def update_task_list(self):
        self.task_list.delete(0, tk.END)
        for i, task in enumerate(self.tasks, 1):
            status = "✓" if task.get('completed', False) else "◻"
            self.task_list.insert(tk.END, f"{i}. {status} {task['title']}")
            if task.get('completed', False):
                self.task_list.itemconfig(tk.END, {'fg': '#888888'})
        
        self.status_var.set(f"Tasks: {len(self.tasks)}")
    
    def add_task(self, event=None):
        task_title = self.task_entry.get().strip()
        if not task_title:
            messagebox.showwarning("Warning", "Please enter a task!")
            return
        
        self.tasks.append({'title': task_title, 'completed': False})
        self.save_tasks()
        self.update_task_list()
        self.task_entry.delete(0, tk.END)
    
    def get_selected_task_index(self):
        selection = self.task_list.curselection()
        if not selection:
            messagebox.showwarning("Warning", "Please select a task first!")
            return -1
        return selection[0]
    
    def mark_complete(self):
        index = self.get_selected_task_index()
        if index < 0:
            return
        self.tasks[index]['completed'] = True
        self.save_tasks()
        self.update_task_list()
    
    def delete_task(self):
        index = self.get_selected_task_index()
        if index < 0:
            return
        self.tasks.pop(index)
        self.save_tasks()
        self.update_task_list()
    
    def clear_all(self):
        if not self.tasks:
            return
        if messagebox.askyesno("Confirm", "Are you sure you want to clear all tasks?"):
            self.tasks = []
            self.save_tasks()
            self.update_task_list()

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
